# This program generates an srad file with forbid constraints for overfly
# routes in China. 

def writeHeader(f):
    f.write("(SuluRad 1 0)\n")

def writeForbiddenEntry(f, overflyRules, forbidden_entry_segs, points):
    f.write("(Restriction \"FORBIDDEN ENTRY SEGMENTS\" F \"Forbidden rules for China overflight\" \"Auto generated by script\" ()\n" )
    for line in overflyRules:
        f.write(line)
    f.write( "\n(\n")
    for entry_seg in forbidden_entry_segs:
        f.write("  (Segment N (FL 0) (FL 99000) "+entry_seg['airway']+" "
                +entry_seg['from'][:-3]+" "+points[entry_seg['from']]['lat']+" "
                +points[entry_seg['from']]['lon']+" "+entry_seg['to'][:-3]+" "
                +points[entry_seg['to']]['lat'] + " " 
                +points[entry_seg['to']]['lon']+")\n")
    f.write(")\n)\n\n")

def writeMandatoryEntry(f, overflyRules, forbidden_entry_segs, points):
    f.write("(Restriction \"MANDAToRY ENTRY POINTS\" M \"Mandatory entry points for China overflight\" \"Auto generated by script\" ()\n" )
    for line in overflyRules:
        f.write(line)
    f.write( "\n(\n")
    for entry_seg in forbidden_entry_segs:
        f.write("  (Segment N (FL 0) (FL 99000) "+entry_seg['airway']+" "
                +entry_seg['from'][:-3]+" "+points[entry_seg['from']]['lat']+" "
                +points[entry_seg['from']]['lon']+" "+entry_seg['to'][:-3]+" "
                +points[entry_seg['to']]['lat'] + " " 
                +points[entry_seg['to']]['lon']+")\n")
    f.write(")\n)\n\n")

def writeSectionHeader(f, entry_node):
    f.write(
        "\n\n(Restriction \""+entry_node[:-3]+"\" F \"Forbidden segments when entering in "
        +entry_node+"\" \"Generated by script\" \n()\n"
    )

def writeRestrictionRules(f, rules, entry_node, points):
    f.write("\n(Restriction \""+entry_node+"\" F \"Forbidden rules for entry in "+entry_node+"\" \"Auto generated by script\" ()\n")
    for line in rules[:-1]:
        f.write(line)
    f.write("    (Point N (FL 0) (FL 99000) "+entry_node[:-3]+" "
                +points[entry_node]['lat']+" "+points[entry_node]['lon']+")"
                )
    f.write("\n  )\n")

def openParanthesis(f, indent):
    for i in range(indent):
        f.write(" ")
    f.write("(\n")

def closeParanthesis(f, indent):
    for i in range(indent):
        f.write(" ")
    f.write(")\n")

def writeSegments(f, segs, points, indent):
    ind = ""
    for i in range(indent):
        ind = ind+" "
    for seg in segs:
        f.write("%s(Segment N (FL 0) (FL 99000) %s %s %s %s %s %s %s)\n" % (ind, seg['airway'], seg['from'][:-3], points[seg['from']]['lat'], points[seg['from']]['lon'], seg['to'][:-3], points[seg['to']]['lat'], points[seg['to']]['lon']))

def writeSequences(f, seqs, points, indent):
    ind = ""
    for i in range(indent):
        ind = ind+" "
    for seq in seqs:
        if type(seq) is dict:
            seg = seq
            f.write("%s(Segment N (FL 0) (FL 99000) %s %s %s %s %s %s %s)\n" % (ind, seg['airway'], seg['from'][:-3], points[seg['from']]['lat'], points[seg['from']]['lon'], seg['to'][:-3], points[seg['to']]['lat'], points[seg['to']]['lon']))
        elif type(seq) is list:
            f.write(ind+"(Seq\n")
            for seg in seq:
                f.write("%s  (Segment N (FL 0) (FL 99000) %s %s %s %s %s %s %s)\n" % (ind, seg['airway'], seg['from'][:-3], points[seg['from']]['lat'], points[seg['from']]['lon'], seg['to'][:-3], points[seg['to']]['lat'], points[seg['to']]['lon']))
            f.write(ind+")\n")

def writePoints(f, forbid_points, points, indent):
    ind = ""
    for i in range(indent):
        ind = ind+" "
    for p in forbid_points:
        f.write("%s(Point N (FL 0) (FL 99000) %s %s %s)\n" % (ind, p[:-3], points[p]['lat'], points[p]['lon']))

def generateSRAD(overflyRules, forbidden_entry_segs, forbidden_segs, points):
    srad_path_forbid = '_CHINA_FORBID_ENTRY_OVERFLIGHT.srad'
    srad_path_mandatory = '_CHINA_MANDATORY_ENTRY_OVERFLIGHT.srad'
    
    with open(srad_path_forbid,'w') as srad:
        writeHeader(srad)
        writeForbiddenEntry(srad, overflyRules, forbidden_entry_segs, points)
        for entry_node in forbidden_segs:
            writeRestrictionRules(srad, overflyRules, entry_node, points)
            openParanthesis(srad, 2)
            writeSequences(srad, forbidden_segs[entry_node], points, 4)
            closeParanthesis(srad, 2)
            closeParanthesis(srad, 0)

    with open(srad_path_mandatory,'w') as srad:
        writeHeader(srad)
        writeMandatoryEntry(srad, overflyRules, forbidden_entry_segs, points)
        for entry_node in forbidden_segs:
            writeRestrictionRules(srad, overflyRules, entry_node, points)
            openParanthesis(srad, 2)
            writeSequences(srad, forbidden_segs[entry_node], points, 4)
            closeParanthesis(srad, 2)
            closeParanthesis(srad, 0)
